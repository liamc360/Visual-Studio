<#@ template language="VBv3.5" debug="True" #>
<#@ output extension="VB" #> 
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #> 
<#@ import namespace="Microsoft.VisualBasic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
 
<#    
Dim conn As New ServerConnection()      
'    
'  Enter Server & login details
conn.ConnectionString = "Data Source=(LocalDb)\MSSQLLocalDB;Integrated Security=True"    
'
Dim server As Microsoft.SqlServer.Management.Smo.Server = New Microsoft.SqlServer.Management.Smo.Server(conn)     
'
'   Enter Database - note the Namespace will be the same as database name
Dim sDatabase as string = "Website"     
' 
' 
Dim database As Microsoft.SqlServer.Management.Smo.Database = New Microsoft.SqlServer.Management.Smo.Database(server, sDatabase)     
'
'   Enter Table   
Dim sTableName as string = "Employees"     

dim sNameSpace as string="APP"      
 
'
Dim table As Microsoft.SqlServer.Management.Smo.Table = New Microsoft.SqlServer.Management.Smo.Table(database, sTableName)     
table.Refresh() 
#>
Imports RunshawClasses.UTILS
Imports System.Data.SqlClient
  
Namespace  <#= sNameSpace #>
     
    <#
    '
    '       generate the class name from the Table
    '
            Dim sClassName as String = ""
            sClassName = table.Name
            '
            ' Specifics for Naming the classes from the Table name ...
            '
            sClassName = REPLACE(REPLACE(sClassName,"rbc_",""),"org_","")
            sClassName = REPLACE(sClassName,"ar_","")
            sClassName = strconv(sClassName, VbStrConv.ProperCase)
            sClassName = REPLACE(sClassName,"_Ql","QL")
            If sClassname = "Delegate" Then
                sClassName = "RBCDelegate"
            End If
    '
    '       have a look, see if there is a primary key on the table
    '
    Dim sPrimaryKey As String = ""
    Dim sPrimaryKeyType As String = ""
    Dim sPrimaryKeyDbType As String = ""
    For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
        If column.InPrimaryKey Then
            sPrimaryKey = column.Name 
            sPrimaryKeyType = column.DataType.Name
            sPrimaryKeyDbType = column.DataType.Name
            Exit For
        End If
    Next
    '
    '       and check what type of field the primary key is ( more types needed here !)
    '
    Dim sCompareChar As String = ""
    Select Case sPrimaryKeyType
        Case "numeric"
            sPrimaryKeyType = "Single"
            sCompareChar = "0"
        Case "varchar","char","nvarchar"
            sPrimaryKeyType = "String"
        Case "int"    
            sPrimaryKeyType = "Integer"
            sCompareChar = "0"
    End Select
    '
    '       generate READ parameter using Primary Key details
    '
    Dim sReadParam As String = ""
    Dim sCompareParam As String = ""
    If sPrimaryKey <> "" Then
        sReadParam = "ByVal " & sPrimaryKey & " As " & sPrimaryKeyType
        If sPrimaryKeyType = "String" Then
            sCompareParam = "If " & sPrimaryKey & " <> String.Empty Then "
        Else
            sCompareParam = "If " & sPrimaryKey & " <> " & sCompareChar & " Then "
        End If
    End If
    '
    '      put some comments at top of generated code
    '
    WriteLine ("'Generated by ClassGen project")
    WriteLine (vbTab &"'Database: " & database.name)
    WriteLine (vbTab &"'Table: " & table.name)
    If sPrimaryKey <> "" Then
        WriteLine (vbTab &"'Primary Key Found: " & sPrimaryKey)
    Else
        WriteLine (vbTab &"'NO Primary Key Found" )
    End If
    #>
  
    Public Class <#= sClassName #>

    Sub New()

    End Sub

    Sub Dispose()
        MyBase.Finalize()
    End Sub

    '
    '       basic READ using Primary Key filter
    '
    Public Function Read(<#= sReadParam #>) As <#= sClassName #>()
        '
            ' return array of class as _arr
            '
            Dim sSQL As String
            Dim sWHERE As String = " WHERE "
            '
            sSQL = "SELECT * FROM <#= database.name #>..<#= table.name #> "
            '
            <#
            If sPrimaryKey <> "" Then
                WriteLine("'")
                WriteLine(vbTab & vbTab & vbTab & "' change selection criteria dependant on parameters")
                WriteLine(vbTab & vbTab & vbTab & "'")
                WriteLine(vbTab & vbTab & vbTab & sCompareParam)
                If sPrimaryKeyType = "String" Then
                    WriteLine(vbTab & vbTab & vbTab & vbTab & "sSQL &= sWHERE & """ & sPrimaryKey & " = '""" & " & " & sPrimaryKey & " & " & """" & "'" & """" )
                Else
                    WriteLine(vbTab & vbTab & vbTab & vbTab & "sSQL &= sWHERE & """ & sPrimaryKey & " = """ & " & " & sPrimaryKey  )
                End If
                WriteLine(vbTab & vbTab & vbTab & "End If")
            End If
            #>
            '
            Try
                ' get dataset
                Dim dtSource As DataTable = SqlHelper.GetDataSet(sSQL, AppConfig.ConnectString).Tables(0)

                If dtSource.Rows.Count <> 0 Then
                    ReDim Preserve _arr(dtSource.Rows.Count - 1)

                    For i = 0 To dtSource.Rows.Count - 1
                        _arr(i) = Load(dtSource.Rows(i))
                    Next
                End If

            Catch exp As Exception
                _GenericException = exp.ToString.Trim
            End Try

            Return _arr
    End Function
    
    ' single record load for use in READ
    Public Function Load(ByVal dataReader As DataRow) As <#= sClassName #>
        Dim obj As New <#= sClassName #>
            '
            ' return single instance of class
            '
            If Not dataReader Is Nothing Then
                <#
                PushIndent(VbTab)
                PushIndent(VbTab)
                PushIndent(VbTab)
                WriteLine("")
                For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
                        WriteLine(vbTab & "'"  & column.Name & " " & column.DataType.Name)
                        Dim sToString as String = ".ToString"
                        Select Case column.DataType.Name.Trim
                            Case "numeric","datetime","int","bit"
                                sToString = ""
                        End Select
                        WriteLine(vbTab & "If IsDBNull(dataReader(""" & column.Name & """)) = False Then")
                        WriteLine(vbTab & vbTab & "obj." & column.Name & " = datareader(""" & column.Name & """)" & sToString)
                        WriteLine(vbTab & "End If")
                        WriteLine("")
                Next
                PopIndent()
                PopIndent()
                PopIndent()
                #>
            End If
            Return obj
    End Function
   
    <#
    '
    ' ============================================================
    ' Add Using Generated Stored Procedure  WriteLine("usp_" + table.name + "_Insert")
    ' ============================================================
    ' Only put an Add method in class if Primary Key Exists
    If sPrimaryKey <> "" Then
        WriteLine("'") 
        WriteLine(vbTab & "' INSERT using stored procedure ")
        WriteLine(vbTab & "'")
        WriteLine(vbTab &  "Public Function Add() As Boolean")
        WriteLine(vbTab & vbTab & "'")
        ' 
        WriteLine(vbTab & vbTab & "Dim iRet As Integer = 0")
        WriteLine(vbTab & vbTab & "Dim iItemNo As Integer = 0")

        WriteLine(vbTab & vbTab & "Using connection As New SqlConnection(AppConfig.ConnectString)")
        WriteLine(vbTab & vbTab & vbTab & "'")
        WriteLine(vbTab & vbTab & vbTab & "Dim comTask As SqlCommand = New SqlCommand()")
        WriteLine(vbTab & vbTab & vbTab & "comTask.Connection = connection")
        'WriteLine(vbTab & vbTab & vbTab & "comTask.CommandText = " + """" + database.name + ".."  + "usp_" + table.name + "_Insert" + """" )
      '  WriteLine(vbTab & vbTab & vbTab & "comTask.CommandType = CommandType.StoredProcedure")
       
       
       
       'AH Changing to not be sproc
       
         WriteLine(vbTab & vbTab & "Dim sCommand as String = String.Empty")
        
        WriteLine(vbTab & vbTab & "sCommand &= """ & "INSERT INTO " & database.name & ".." & table.name & " (" & """")
        
        Dim iCount As Integer = 0
        For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
            If column.Identity = False Then
                 Write(vbTab & vbTab & vbTab & "sCommand &= """ & column.Name )
                 iCount += 1
                 If iCount < table.columns.count-1
                    WriteLine("," & """")
                 Else
                    Writeline("""" )
                 End If
             End If
        Next
        
        WriteLine(vbTab & vbTab & "sCommand &= """ & " )" & """")
        WriteLine(vbTab & vbTab & "sCommand &= """ & " VALUES (" & """")
        
        iCount = 0
        For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
            If column.Identity = False Then
                Dim Quote As String = "'"
                Select Case column.DataType.Name.Trim
                    Case "int","numeric","datetime"
                        Quote = ""
                    Case Else
                        Quote = ""
                End Select
            
                Write(vbTab & vbTab & vbTab & "sCommand &= ")
                
                If Quote <> "" Then
                    Write("""" & Quote & """")
                    Write(" & ")
                End If
                            
                Write("""" & "@" & column.Name & """" )
                
                iCount += 1
                Write(" & ")
                If iCount < table.columns.count-1
                    Write("""" & Quote & "," & """")
                Else
                    Write("""" & Quote & """")
                End If
                
                WriteLine("")
            End If
        Next
        
  
        
        WriteLine(vbTab & vbTab & "sCommand &= """ & " );" & """")
        
                WriteLine(vbTab & vbTab & "sCommand &=  ""set " & "@" & sprimarykey & "= scope_identity()""" )
        
        WriteLine(vbTab & vbTab & "comTask.CommandText = sCommand")
        WriteLine(vbTab & vbTab & "comTask.CommandType = CommandType.Text")
        
        'ah changed to not be sproc END
       
       
       #>
       <#
       
       
       
        WriteLine(vbTab & vbTab & "")
        WriteLine(vbTab & vbTab & "")
                                
        Dim iCount2 As Integer = 0
        Dim paramname as string = ""
        Dim copyback as string = ""
        For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
            If column.Identity = False Then
                paramname = "param" + column.name
                WriteLine(vbTab & vbTab & vbTab & "Dim " + paramname + " As New SqlParameter()")
                WriteLine(vbTab & vbTab & vbTab & paramname + ".ParameterName = " + """" + "@" + column.name + """")
                Select Case column.DataType.Name
                    Case "numeric"
                        WriteLine(vbTab & vbTab & vbTab & paramname + ".SqlDbType = SqlDbType.Decimal")                    
                    Case Else
                        WriteLine(vbTab & vbTab & vbTab & paramname + ".SqlDbType = SqlDbType." & column.DataType.Name)
                End Select
                WriteLine(vbTab & vbTab & vbTab & paramname + ".Direction = ParameterDirection.Input")
                WriteLine(vbTab & vbTab & vbTab & paramname + ".Value = _" + column.name)
                WriteLine(vbTab & vbTab & vbTab & "comTask.Parameters.Add(" + paramname + ")")    
                WriteLine(vbTab & vbTab & "")
            Else
                paramname = "param" + column.name
                WriteLine(vbTab & vbTab & vbTab & "Dim " + paramname + " As New SqlParameter()")
                WriteLine(vbTab & vbTab & vbTab & paramname + ".ParameterName = " + """" + "@" + column.name + """")
                WriteLine(vbTab & vbTab & vbTab & paramname + ".SqlDbType = SqlDbType." & column.DataType.Name)
                WriteLine(vbTab & vbTab & vbTab & paramname + ".Direction = ParameterDirection.Output")
                WriteLine(vbTab & vbTab & vbTab & "comTask.Parameters.Add(" + paramname + ")")    
                WriteLine(vbTab & vbTab & "")
                copyback = "_" + column.name + " = " & paramname & ".Value"
            End If
        Next
        WriteLine(vbTab & vbTab & vbTab & "connection.Open()")
        WriteLine(vbTab & vbTab & vbTab & "Try")
        WriteLine(vbTab & vbTab & vbTab & vbTab & "iRet = comTask.ExecuteNonQuery")
        Writeline(vbtab & vbTab & vbTab & vbTab & copyback)
        WriteLine(vbTab & vbTab & vbTab & "Catch ex As Exception")
        WriteLine(vbTab & vbTab & vbTab & vbTab & "_GenericException = ex.ToString.Trim")
        WriteLine(vbTab & vbTab & vbTab & "End Try")

        WriteLine(vbTab & vbTab & "End Using")
        WriteLine(vbTab & vbTab & "Return True")

        WriteLine(vbTab &  "End Function")
    End If
    '
    '
    ' ============================================================
    ' Update Using Generated Stored Procedure  WriteLine("usp_" + table.name + "_Update")
    ' ============================================================
    ' Only put a Update method in class if Primary Key Exists
    If sPrimaryKey <> "" Then
        WriteLine(vbTab & "'") 
        WriteLine(vbTab & "' UPDATE using stored procedure ")
        WriteLine(vbTab & "'")
        WriteLine(vbTab &  "Public Function Update() As Boolean")
        WriteLine(vbTab & vbTab & "'")
        ' 
        WriteLine(vbTab & vbTab & "Dim iRet As Integer = 0")
        WriteLine(vbTab & vbTab & "Dim iItemNo As Integer = 0")

        WriteLine(vbTab & vbTab & "Using connection As New SqlConnection(AppConfig.ConnectString)")
        WriteLine(vbTab & vbTab & vbTab & "'")
        WriteLine(vbTab & vbTab & vbTab & "Dim comTask As SqlCommand = New SqlCommand()")
        WriteLine(vbTab & vbTab & vbTab & "comTask.Connection = connection")
   WriteLine(vbTab & vbTab & "Dim sCommand as String = String.Empty")
            
            
            WriteLine(vbTab & vbTab & "sCommand &= """ & "UPDATE " & database.name & ".." & table.name & """" )
            WriteLine(vbTab & vbTab & "sCommand &= """ & " SET " & """")
            
            Dim iCount2 As Integer = 0
            For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
                If column.Name <> sPrimaryKey Then
                    Dim Quote As String = "'"
                    Select Case column.DataType.Name.Trim
                        Case "int","numeric","datetime"
                            Quote = ""
                        Case Else
                            Quote = ""
                    End Select
                
                    Write(vbTab & vbTab & "sCommand &= ")
                    
                    Write(column.Name & " = ")
                    
                    If Quote <> "" Then
                        Write("""" & Quote & """")
                        Write(" & ")
                    End If
                                
                Write("""" & "@" & column.Name & """" )
                    
                    iCount2 += 1
                    Write(" & ")
                    If iCount2 < table.columns.count-1
                        Write("""" & Quote & "," & """")
                    Else
                        Write("""" & Quote & """")
                    End If
                    
                    WriteLine("")
                End If
            Next
            
            
            If sPrimaryKeyType = "String" Then
                WriteLine(vbTab & vbTab & "comTask.CommandText = """ & " WHERE " & sPrimaryKey & " = '" & """" &  " & " & sPrimaryKey & " & " & """" &   "'" & """"  )
            Else
                WriteLine(vbTab & vbTab & "comTask.CommandText = """ & " WHERE " & sPrimaryKey & " = " & """" &  " & " & sPrimaryKey )
            End If
            
            WriteLine(vbTab & vbTab & "comTask.CommandText = sCommand")
            WriteLine(vbTab & vbTab & "comTask.CommandType = CommandType.Text")
        WriteLine(vbTab & vbTab & "")
        WriteLine(vbTab & vbTab & "")
                                
         iCount2 = 0
        Dim paramname as string = ""
        For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
            paramname = "param" + column.name
            WriteLine(vbTab & vbTab & vbTab & "Dim " + paramname + " As New SqlParameter()")
            WriteLine(vbTab & vbTab & vbTab & paramname + ".ParameterName = " + """" + "@" + column.name + """")
            Select Case column.DataType.Name
                    Case "numeric"
                        WriteLine(vbTab & vbTab & vbTab & paramname + ".SqlDbType = SqlDbType.Decimal")                    
                    Case Else
                        WriteLine(vbTab & vbTab & vbTab & paramname + ".SqlDbType = SqlDbType." & column.DataType.Name)
                End Select
            WriteLine(vbTab & vbTab & vbTab & paramname + ".Direction = ParameterDirection.Input")
            WriteLine(vbTab & vbTab & vbTab & paramname + ".Value = _" + column.name)
            WriteLine(vbTab & vbTab & vbTab & "comTask.Parameters.Add(" + paramname + ")")    
            WriteLine(vbTab & vbTab & "")
        Next
        WriteLine(vbTab & vbTab & vbTab & "connection.Open()")
        WriteLine(vbTab & vbTab & vbTab & "Try")
        WriteLine(vbTab & vbTab & vbTab & vbTab & "iRet = comTask.ExecuteNonQuery")
        WriteLine(vbTab & vbTab & vbTab & "Catch ex As Exception")
        WriteLine(vbTab & vbTab & vbTab & vbTab & "_GenericException = ex.ToString.Trim")
        WriteLine(vbTab & vbTab & vbTab & "End Try")

        WriteLine(vbTab & vbTab & "End Using")
        WriteLine(vbTab & vbTab & "Return True")

        
        WriteLine(vbcrlf)
        WriteLine(vbTab & vbTab & "Return True")
         WriteLine(vbTab &  "End Function")
    End If
    '
    '
      
    '
    ' Only put a Delete method in class if Primary Key Exists
    '
    If sPrimaryKey <> "" Then
        WriteLine("'")
        WriteLine(vbTab &  "Public Function Delete()  As Boolean")
        WriteLine(vbTab & "'")
        WriteLine(vbTab & "Dim iRet As Integer = 0")
        WriteLine(vbTab & "Dim iItemNo As Integer = 0")
        WriteLine(vbcrlf)
        WriteLine(vbTab & "Using connection As New SqlConnection(AppConfig.ConnectString)")
        WriteLine(vbTab & "'")
        WriteLine(vbTab & vbTab & "Dim comTask As SqlCommand = New SqlCommand()")
        WriteLine(vbTab & vbTab & "comTask.Connection = connection")
        If sPrimaryKeyType = "String" Then
            WriteLine(vbTab & vbTab & "comTask.CommandText = """ & "DELETE FROM " & database.name & ".." & table.name & " WHERE " & sPrimaryKey & " = '" & """" &  " & _" & sPrimaryKey & " & " & """" &   "'" & """"  )
        Else
            WriteLine(vbTab & vbTab & "comTask.CommandText = """ & "DELETE FROM " & database.name & ".." & table.name & " WHERE " & sPrimaryKey & " = " & """" &  " & _" & sPrimaryKey )
        End If
        WriteLine(vbTab & vbTab & "comTask.CommandType = CommandType.Text")
        WriteLine(vbTab & vbTab & "connection.Open()")
        WriteLine(vbTab & vbTab & "Try")
        WriteLine(vbTab & vbTab & vbTab &  "iRet = comTask.ExecuteNonQuery")
        WriteLine(vbTab & vbTab & "Catch ex As Exception")
        WriteLine(vbTab & vbTab & vbTab & "_GenericException = ex.ToString.Trim")
        WriteLine(vbTab & vbTab &  vbTab &   "Return False")
        WriteLine(vbTab & vbTab & "End Try")
        WriteLine(vbTab & "End Using")
        WriteLine(vbcrlf)
        WriteLine(vbTab & "Return True")
        WriteLine(vbcrlf)
        WriteLine(vbTab &  "End Function")
        End If
    

        
    
    #>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    '
    '  Properties generated same as column names
    '
    
    
    
    
    Private _arr As <#= sClassName #>()

    Private _GenericException As String
    Public ReadOnly Property GenericException() As String
            Get
                Return _GenericException
            End Get
    End Property
    
    <#
    PushIndent(VbTab)
    WriteLine("")
    For Each column As Microsoft.SqlServer.Management.Smo.Column In table.Columns
            WriteLine("'" & column.Name & " " & column.DataType.Name)
            Dim sType as String
            Select Case column.DataType.Name.Trim
                Case "int"
                    sType = "Integer"
                Case "numeric"
                    sType = "Single"
                Case "datetime"
                    sType = "Date"
                Case "bit"
                    sType = "Boolean"
                Case Else
                    sType = "String"
            End Select
            WriteLine("Public Property " & column.Name & " As " & sType)
            WriteLine(vbTab & "Get")
            WriteLine(vbTab & vbTab & "Return _" & column.Name)
            WriteLine(vbTab & "End Get")
            WriteLine(vbTab & "Set(ByVal value As " & sType & ")")
            WriteLine(vbTab & vbTab & "_" & column.Name & " = value")
            WriteLine(vbTab & "End Set")
            WriteLine("End Property")
            WriteLine("Private _" & column.Name & " As " & sType)
            WriteLine("")
    Next
    PopIndent()
    #>

    End Class
End Namespace